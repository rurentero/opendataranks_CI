/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.Dataset;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-03-19T10:19:46.202Z[GMT]")
@Api(value = "datasets", description = "the datasets API")
public interface DatasetsApi {

    @ApiOperation(value = "Get all datasets", nickname = "getAllDatasets", notes = "Returns all datasets in database ", response = Dataset.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/datasets",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagedResources<Dataset>> getAllDatasets(@RequestParam(defaultValue = "W1") String rankingId, @RequestParam(defaultValue = "false") Boolean inverted, Pageable pageable, PagedResourcesAssembler assembler);


    @ApiOperation(value = "Find by license", nickname = "getAllDatasetsByLicense", notes = "Returns all datasets in database that matchs a license type ", response = Dataset.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/datasets/findByLicense",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagedResources<Dataset>> getAllDatasetsByLicense(@NotNull @ApiParam(value = "license type of the record to search", required = true) @Valid @RequestParam(value = "license", required = true) String license, @RequestParam(defaultValue = "W1") String rankingId, @RequestParam(defaultValue = "false") Boolean inverted, Pageable pageable, PagedResourcesAssembler assembler);


    @ApiOperation(value = "Find by name", nickname = "getAllDatasetsByName", notes = "Returns all datasets in database that matchs a name ", response = Dataset.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/datasets/findByName",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagedResources<Dataset>> getAllDatasetsByName(@NotNull @ApiParam(value = "name of the record to search", required = true) @Valid @RequestParam(value = "name", required = true) String name, @RequestParam(defaultValue = "W1") String rankingId, @RequestParam(defaultValue = "false") Boolean inverted, Pageable pageable, PagedResourcesAssembler assembler);


    @ApiOperation(value = "Find by organization", nickname = "getAllDatasetsByOrganization", notes = "Returns all datasets in database that matchs an organization ", response = Dataset.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/datasets/findByOrganization",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagedResources<Dataset>> getAllDatasetsByOrganization(@NotNull @ApiParam(value = "name of the organization", required = true) @Valid @RequestParam(value = "name", required = true) String name, @RequestParam(defaultValue = "W1") String rankingId, @RequestParam(defaultValue = "false") Boolean inverted, Pageable pageable, PagedResourcesAssembler assembler);


    @ApiOperation(value = "Find by tags", nickname = "getAllDatasetsByTags", notes = "Returns all datasets in database that matchs a list of tags ", response = Dataset.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/datasets/findByTags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PagedResources<Dataset>> getAllDatasetsByTags(@NotNull @ApiParam(value = "tags used in the search", required = true) @Valid @RequestParam(value = "tags", required = true) List<String> tags, @RequestParam(defaultValue = "W1") String rankingId, @RequestParam(defaultValue = "false") Boolean inverted, Pageable pageable, PagedResourcesAssembler assembler);


    @ApiOperation(value = "Get dataset by id", nickname = "getDatasetById", notes = "Returns an specific dataset ", response = Dataset.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dataset.class),
        @ApiResponse(code = 400, message = "bad input parameter"),
        @ApiResponse(code = 404, message = "resource not found") })
    @RequestMapping(value = "/datasets/{datasetId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Dataset> getDatasetById(@ApiParam(value = "pass the dataset id to return its properties",required=true) @PathVariable("datasetId") String datasetId);


    @ApiOperation(value = "Post a like for a specific dataset", nickname = "postLike", notes = " ", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "search results matching criteria"),
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 404, message = "resource not found"),
            @ApiResponse(code = 301, message = "forbidden")})
    @RequestMapping(value = "/datasets/{datasetId}/like/{ipuser}",
            method = RequestMethod.POST)
    ResponseEntity<Void> postLike(@ApiParam(value = "pass the dataset id",required=true) @PathVariable("datasetId") String datasetId, @ApiParam(value = "IP of anonymous user", required=true) @PathVariable("ipuser") String ipuser);

    @ApiOperation(value = "Post a dislike for a specific dataset", nickname = "postDislike", notes = " ", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "search results matching criteria"),
            @ApiResponse(code = 400, message = "bad input parameter"),
            @ApiResponse(code = 404, message = "resource not found"),
            @ApiResponse(code = 301, message = "forbidden")})
    @RequestMapping(value = "/datasets/{datasetId}/dislike/{ipuser}",
            method = RequestMethod.POST)
    ResponseEntity<Void> postDislike(@ApiParam(value = "pass the dataset id",required=true) @PathVariable("datasetId") String datasetId, @ApiParam(value = "IP of anonymous user", required=true) @PathVariable("ipuser") String ipuser);

}
