/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.5).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.helpers.FormDataWithFile;
import io.swagger.model.User;
import io.swagger.model.Weight;
import io.swagger.annotations.*;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.ModelMap;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2019-03-19T10:19:46.202Z[GMT]")
@Api(value = "user", description = "the user API")
public interface UserApi {

    @ApiOperation(value = "Adds a new weight to a user", nickname = "addWeight", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "item created"),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing item already exists") })
    @RequestMapping(value = "/user/{username}/weights",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> addWeight(@ApiParam(value = "The name that needs to be fetched",required=true) @PathVariable("username") String username,@ApiParam(value = "Weight to add"  )  @Valid @RequestBody Weight body);


//    @ApiOperation(value = "Create new user", nickname = "createUser", notes = "This can only be done by the logged in user.", tags={  })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "successful operation") })
//    @RequestMapping(value = "/user",
//        consumes = { "application/json" },
//        method = RequestMethod.POST)
//    ResponseEntity<Void> createUser(@ApiParam(value = "Created user object" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "Delete user", nickname = "deleteUser", notes = "This can only be done by the logged in user.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "The name that needs to be deleted",required=true) @PathVariable("username") String username);


    @ApiOperation(value = "Delete a specific weight from an user", nickname = "deleteWeightById", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "weight sucessfully deleted"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/user/{username}/weights/{weightId}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteWeightById(@ApiParam(value = "The name that needs to be fetched",required=true) @PathVariable("username") String username,@ApiParam(value = "The id that needs to be fetched",required=true) @PathVariable("weightId") Integer weightId);


    @ApiOperation(value = "Get all weigths from an user", nickname = "getAllWeights", notes = "", response = Weight.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Weight.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}/weights",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Weight>> getAllWeights(@ApiParam(value = "The name that needs to be fetched",required=true) @PathVariable("username") String username);


    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = User.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.",required=true) @PathVariable("username") String username);


    @ApiOperation(value = "Get a specific weight from an user", nickname = "getWeightById", notes = "", response = Weight.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Weight.class),
        @ApiResponse(code = 400, message = "Invalid username supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}/weights/{weightId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Weight> getWeightById(@ApiParam(value = "The name that needs to be fetched",required=true) @PathVariable("username") String username,@ApiParam(value = "The id that needs to be fetched",required=true) @PathVariable("weightId") Integer weightId);

    // TODO Punto de prueba a securizar
    @RequestMapping(value = "/admins/hello",
            produces = { "application/json", "application/xml" },
            method = RequestMethod.GET)
    public String helloWorld(@RequestParam(value="name", defaultValue="World") String name);

    @ApiOperation(value = "Logs user into the system", nickname = "login", notes = "", response = User.class, tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = String.class),
            @ApiResponse(code = 403, message = "Invalid username/password supplied") })
    @PostMapping(value = "/user",
            produces = { "application/json" })
    public ResponseEntity<User> login(@NotNull @ApiParam(value = "The user name for login", required = true) @RequestParam("user") String username, @NotNull @ApiParam(value = "The password for login in clear text", required = true) @RequestParam("password") String pwd);















    @ApiOperation(value = "Logs out current logged in user session", nickname = "logoutUser", notes = "", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(value = "/user/logout",
        method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();


    @ApiOperation(value = "Updated user", nickname = "updateUser", notes = "This can only be done by the logged in user.", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Invalid user supplied"),
        @ApiResponse(code = 404, message = "User not found") })
    @RequestMapping(value = "/user/{username}",
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@ApiParam(value = "Updated user object" ,required=true )  @Valid @RequestBody User body,@ApiParam(value = "name that need to be updated",required=true) @PathVariable("username") String username);


    // ADMINS section. Path: /admins
    // TODO Seccion para los administradores: Subida de fichero, a√±adir nueva ponderacion

    @ApiOperation(value = "Update file and mapping", nickname = "uploadFileAndMapping", notes = "This can only be done by an admin.", tags={  })
    @ApiResponses(value = {
            @ApiResponse(code = 400, message = "Bad mapping params or file"),
            @ApiResponse(code = 500, message = "Problems found during the upload"),
            @ApiResponse(code = 200, message = "File uploaded sucessfully!") })
    @RequestMapping(value = "/admins/uploadFile",
            consumes = { MediaType.MULTIPART_FORM_DATA_VALUE },
            method = RequestMethod.POST)
    ResponseEntity<Void> uploadFileAndMapping(@ModelAttribute FormDataWithFile formDataWithFile);


}
